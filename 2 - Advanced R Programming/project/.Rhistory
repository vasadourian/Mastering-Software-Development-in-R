ggplot(ames_train, aes(x=log(Lot.Area))) + geom_histogram() + labs(title="Histogram of Lot Areas, Log-Transformed")
sort(sapply(ames_train, function(x) sum(is.na(x))), decreasing=TRUE)
levels(ames_train$Utilities)
#[1] "AllPub" "NoSeWa" "NoSewr"
length(which(ames_train$Utilities=="AllPub"))
#[1] 1000
length(which(ames_train$Street=="Pave"))
#[1] 997
length(which(ames_train$Street=="Grvl"))
#[1] 3
summary(ames_train$Roof.Matl)
#ClyTile CompShg Membran   Metal    Roll Tar&Grv WdShake WdShngl
#      0     822       0       1       0       8       1       2
final_bas_test <- bas.lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + MS.Zoning + Lot.Frontage +
Garage.Area + Functional + Heating.QC + Kitchen.Qual + Heating +
Year.Remod.Add + Exter.Qual + Exterior.1st,
prior="BIC",
modelprior=uniform(),
data=ames_test)
image(final_bas_test)
ggplot(na.omit(ames_train), aes(x=final_model$residuals)) + geom_histogram()
plot(final_model$residuals, col="red")
abline(h=0, lty=2)
qqnorm(final_model$residuals, col="red")
qqline(final_model$residuals)
final_model_residuals <- residuals(final_model)
final_model_rmse <- sd(final_model_residuals)
final_model_rmse
final_model_validation <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + MS.Zoning +
Garage.Area + Functional + Kitchen.Qual + Heating, data=ames_validation)
final_model_validation_residuals <- residuals(final_model_validation)
final_model_validation_rmse <- sd(final_model_validation_residuals)
final_model_validation_rmse
initial_model_test.bas <- bas.lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type,
prior="BIC",
modelprior=uniform(),
data=ames_test)
initial_model_test.bas
image(initial_model_test.bas)
initial_model_test.bas <- bas.lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type,
prior="BIC",
modelprior=uniform(),
data=ames_test)
image(initial_model_test.bas)
predict(final_model, ames_validation, interval = "prediction", level = 0.95)
final_model <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + #MS.Zoning +
Garage.Area + Functional + Kitchen.Qual + Heating,
data=ames_train)
summary(final_model)
predict(final_model, ames_validation, interval = "prediction", level = 0.95)
predict(final_model, ames_validation, interval = "prediction", level = 0.95)
final_model <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + #MS.Zoning +
Garage.Area + Functional + Kitchen.Qual, #+ Heating,
data=ames_train)
summary(final_model)
predict(final_model, ames_validation, interval = "prediction", level = 0.95)
View(ames_test)
View(ames_validation)
View(ames_validation)
View(ames_train)
final_model <- lm(price ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + #MS.Zoning +
Garage.Area + Functional + Kitchen.Qual, #+ Heating,
data=ames_train)
summary(final_model)
predict(final_model, ames_validation, interval = "prediction", level = 0.95)
predictions<- as.dataframe(predict(final_model, ames_validation, interval = "prediction", level = 0.95))
predictions<- as.data.frame(predict(final_model, ames_validation, interval = "prediction", level = 0.95))
View(predictions)
predictions <- as.data.frame(predict(final_model, ames_validation, interval = "prediction", level = 0.95))
predictions$validation.prices <- ames_validation$price
predictions <- predictions %>%
mutate(in_range <- ifelse(x > predictions$lwr & x < predictions$upr, "yes", "no"))
predictions <- predictions %>%
mutate(in_range <- ifelse(validation.prices > lwr & validation.prices < upr, "yes", "no"))
predictions <- predictions %>%
mutate(in_range = ifelse(validation.prices > lwr & validation.prices < upr, "yes", "no"))
length(which(predictions$in_range=="yes"))
length(which(predictions$in_range=="yes"))/nrows(predictions)
length(which(predictions$in_range=="yes"))/nrow(predictions)
length(which(predictions$in_range=="yes"))/nrow(predictions)
sum(is.na(predictions$validation.prices))
log(194000)
predictions <- as.data.frame(predict(final_model, ames_validation, interval = "prediction", level = 0.95))
predictions$log_validation.prices <- log(ames_validation$price)
final_model <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + #MS.Zoning +
Garage.Area + Functional + Kitchen.Qual, #+ Heating,
data=ames_train)
summary(final_model)
predictions <- as.data.frame(predict(final_model, ames_validation, interval = "prediction", level = 0.95))
predictions$log_validation.prices <- log(ames_validation$price)
predictions <- predictions %>%
mutate(in_range = ifelse(validation.prices > lwr & validation.prices < upr, "yes", "no"))
predictions <- predictions %>%
mutate(in_range = ifelse(log_validation.prices > lwr & log_validation.prices < upr, "yes", "no"))
length(which(predictions$in_range=="yes"))/nrow(predictions)
load("ames_train.Rdata")
library(statsr)
library(dplyr)
library(BAS)
library(ggplot2)
library(GGally)
library(magrittr)
library(MASS)
ames_train <- ames_train %>%
filter(Sale.Condition == "Normal")
ordering_med <- order(as.numeric(by(ames_train$price, ames_train$Neighborhood, median)), decreasing = TRUE)
ames_train$Neighborhood <- ordered(ames_train$Neighborhood, levels=levels(ames_train$Neighborhood)[ordering_med])
boxplot(price ~ Neighborhood, data = ames_train, las = 2, ylab = "Price", main = "House price by neighborhood in Ames, Iowa")
avg_price_year <- sapply(split(ames_train$price, ames_train$Year.Built), mean)
plot(avg_price_year, xaxt="n", title="Average Price of Homes in Ames by Year")
axis(1, at=seq(1,102,4), labels=sort(unique(ames_train$Year.Built))[seq(1,102,4)])
ggplot(ames_train, aes(x=Year.Built, y=price)) +
labs(title="Prices of Homes in Ames by Year") +
geom_point()
suppressWarnings(suppressMessages(ggpairs(ames_train, columns = c(3,2,18,20,21,22))))
suppressWarnings(suppressMessages(ggpairs(ames_train, columns=c(3,31,53,56,81))))
#which( colnames(ames_train)=="price" )
#which( colnames(ames_train)=="area" )
#which( colnames(ames_train)=="Year.Built" )
#which( colnames(ames_train)=="Overall.Cond" )
#which( colnames(ames_train)=="Bldg.Type" )
#which( colnames(ames_train)=="Overall.Qual" )
#which( colnames(ames_train)=="Bedroom.AbvGr" )
#which( colnames(ames_train)=="Exter.Cond" )
#which( colnames(ames_train)=="TotRms.AbvGrd" )
#which( colnames(ames_train)=="Sale.Condition" )
initial_model_adjr2 <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type, data=ames_train)
summary(initial_model_adjr2)
initial_model.bas <- bas.lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type,
prior="BIC",
modelprior=uniform(),
data=ames_train)
initial_model.bas
initial_model_adjr2 <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF + X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) + Bsmt.Full.Bath + Condition.1 + Bldg.Type, data=ames_train)
summary(initial_model_adjr2)
stepAIC(initial_model_adjr2, direction="backward", trace=TRUE)
ggplot(ames_train, aes(x=initial_model_adjr2$residuals)) + geom_histogram() + labs(title="Initial Model Residuals") + xlab("residuals")
plot(initial_model_adjr2$residuals, col="red", ylab="residuals", title="Residuals Scatterplot") +
abline(h=0, lty=2)
qqnorm(initial_model_adjr2$residuals, col="red")
qqline(initial_model_adjr2$residuals)
initial_residuals <- residuals(initial_model_adjr2)
initial_rmse <- sd(initial_residuals)
initial_rmse
load("ames_test.Rdata")
initial_testmodel_adjr2 <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF + X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) + Bsmt.Full.Bath + Condition.1 + Bldg.Type, data=ames_test)
initial_test_residuals <- residuals(initial_testmodel_adjr2)
initial_test_rmse <- sd(initial_test_residuals)
initial_test_rmse
initial_model_test.bas <- bas.lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type,
prior="BIC",
modelprior=uniform(),
data=ames_test)
initial_model_test.bas
final_model <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + Garage.Area +
Functional + Kitchen.Qual, data=ames_train)
summary(final_model)
ggplot(ames_train, aes(x=price)) + geom_histogram() + labs(title="Histogram of Prices")
ggplot(ames_train, aes(x=log(price))) + geom_histogram() + labs(title="Histogram of Prices, Log-Transformed")
ggplot(ames_train, aes(x=Lot.Area)) + geom_histogram() + labs(title="Histogram of Lot Areas")
ggplot(ames_train, aes(x=log(Lot.Area))) + geom_histogram() + labs(title="Histogram of Lot Areas, Log-Transformed")
sort(sapply(ames_train, function(x) sum(is.na(x))), decreasing=TRUE)
levels(ames_train$Utilities)
#[1] "AllPub" "NoSeWa" "NoSewr"
length(which(ames_train$Utilities=="AllPub"))
#[1] 1000
length(which(ames_train$Street=="Pave"))
#[1] 997
length(which(ames_train$Street=="Grvl"))
#[1] 3
summary(ames_train$Roof.Matl)
#ClyTile CompShg Membran   Metal    Roll Tar&Grv WdShake WdShngl
#      0     822       0       1       0       8       1       2
final_bas_test <- bas.lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + MS.Zoning + Lot.Frontage +
Garage.Area + Functional + Heating.QC + Kitchen.Qual + Heating +
Year.Remod.Add + Exter.Qual + Exterior.1st,
prior="BIC",
modelprior=uniform(),
data=ames_test)
#image(final_bas_test)
ggplot(na.omit(ames_train), aes(x=final_model$residuals)) + geom_histogram()
plot(final_model$residuals, col="red")
abline(h=0, lty=2)
qqnorm(final_model$residuals, col="red")
qqline(final_model$residuals)
final_model_residuals <- residuals(final_model)
final_model_rmse <- sd(final_model_residuals)
final_model_rmse
load("ames_validation.Rdata")
final_model_validation <- lm(log(price) ~ Overall.Qual + Neighborhood + X1st.Flr.SF +
X2nd.Flr.SF + Overall.Cond + Year.Built + log(Lot.Area) +
Bsmt.Full.Bath + Condition.1 + Bldg.Type + MS.Zoning +
Garage.Area + Functional + Kitchen.Qual + Heating, data=ames_validation)
final_model_validation_residuals <- residuals(final_model_validation)
final_model_validation_rmse <- sd(final_model_validation_residuals)
final_model_validation_rmse
predictions <- as.data.frame(predict(final_model, ames_validation, interval = "prediction", level = 0.95))
predictions$log_validation.prices <- log(ames_validation$price)
predictions <- predictions %>%
mutate(in_range = ifelse(log_validation.prices > lwr & log_validation.prices < upr, "yes", "no"))
library(readr)
print(out)
library(readr)
library(magrittr)
source("oop_code.R")
setpwd("/home/vicken/COURSES/Coursera/Software Dev in R/project")
setwd("/home/vicken/COURSES/Coursera/Software Dev in R/project")
source("/home/vicken/COURSES/Coursera/Software Dev in R/project/oop_code.R")
setwd("/home/vicken/COURSES/Coursera/Software Dev in R/2 - Advanced R Programming/project")
out <- subject(x, 10)
out <- subject(x, 10)
out <- subject(x, 10)
out <- subject(x, 10)
## Read in the data
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
install.packages(c("assertthat", "BAS", "BH", "broom", "colorspace", "cubature", "curl", "DBI", "digest", "evaluate", "ggplot2", "git2r", "jsonlite", "knitr", "mnormt", "openssl", "plotrix", "progress", "psych", "R6", "Rcpp", "RcppEigen", "readr", "reshape2", "rmarkdown", "shiny", "stringi", "stringr", "swirl", "tibble", "yaml", "zoo"))
library(readr)
library(magrittr)
source("oop_code.R")
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
x <- make_LD(data)
print(class(x))
print(x)
source("oop_code.R")
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
library(readr)
library(magrittr)
source("oop_code.R")
## Load any other packages that you may need to execute your code
data <- read_csv("data/MIE.csv")
x <- make_LD(data)
print(class(x))
print(x)
## Subject 10 doesn't exist
out <- subject(x, 10)
print(out)
out <- subject(x, 14)
print(out)
out <- subject(x, 54) %>% summary
print(out)
out <- subject(x, 14) %>% summary
print(out)
out <- subject(x, 44) %>% visit(0) %>% room("bedroom")
print(out)
## Show a summary of the pollutant values
out <- subject(x, 44) %>% visit(0) %>% room("bedroom") %>% summary
print(out)
out <- subject(x, 44) %>% visit(1) %>% room("living room") %>% summary
print(out)
Factorial_loop <- function(x)
{
if(is.character(x))
stop("Your input is a character. It must be numeric.")
if(x < 0)
stop("Please enter a number greater than 0.")
if (x == 0)
{
result <- 1
return(result)
}
else
{
result <- 1
while (x > 0)
{
result <- result * x
x <- x - 1
}
return(result)
}
}
###########################################################
library(purrr)
Factorial_reduce <- function(x)
{
if(x > 0)
{
reduce(1:x, function(x, y)
{
x * y
})
}
}
###########################################################
Factorial_func <- function(x)
{
if (x == 0)
{
return(1)
}
else
{
x * Factorial_func(x - 1)
}
}
###########################################################
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
stopifnot(n > 0)
if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
} else {
factorial_tbl[n] <<- factorial_tbl[n-1]
Factorial_mem(n)
}
}
Factorial_mem(20)
Factorial_mem(4)
Factorial_mem(5
)
Factorial_mem(7)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
stopifnot(n > 0)
if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
} else {
factorial_tbl[n] <<- n * Factorial_tbl[n-1]
factorial_tbl[n]
}
}
Factorial_mem(9)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
stopifnot(n > 0)
if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
} else {
factorial_tbl[n] <<- n * factorial_tbl[n-1]
factorial_tbl[n]
}
}
Factorial_mem(9)
Factorial_mem(5)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
stopifnot(n > 0)
if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
} else {
factorial_tbl[n-1] <<- n * Factorial_mem(n-1)
n * factorial_tbl[n-1]
}
}
Factorial_mem(8)
Factorial_mem(4)
Factorial_mem(3)
Factorial_mem(2)
Factorial_fun(5)
Factorial_func(5)
Factorial_func(8)
Factorial_func(2)
Factorial_func(3)
Factorial_mem(0)
Factorial_mem(1)
Factorial_mem(2)
Factorial_mem(3)
Factorial_mem(0)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
stopifnot(n >= 0)
if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
} else {
factorial_tbl[n-1] <<- n * Factorial_mem(n-1)
n * factorial_tbl[n-1]
}
}
Factorial_mem(0)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
stopifnot(n > 0)
if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
} else {
factorial_tbl[n-1] <<- n * Factorial_mem(n-1)
n * factorial_tbl[n-1]
}
}
Factorial_mem(1)
Factorial_mem(2)
Factorial_mem(3)
Factorial_mem(4)
Factorial_mem(5)
Factorial_mem(6)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
if (n <0){
message("Please enter a number greater than 0.")
}
else if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
}
else {
factorial_tbl[n] <<- n * Factorial_mem[n-1]
}
}
Factorial_mem(6)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
if (n <0){
message("Please enter a number greater than 0.")
}
else if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
}
else {
factorial_tbl[n] <<- n * Factorial_mem(n-1)
Factorial_mem()
}
}
Factorial_mem(6)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
if (n <0){
message("Please enter a number greater than 0.")
}
else if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
}
else {
factorial_tbl[n] <<- n * Factorial_mem(n-1)
Factorial_mem(n)
}
}
Factorial_mem(6)
Factorial_mem(5)
Factorial_mem(4)
Factorial_mem(3)
Factorial_mem(0)
factorial_tbl <- c(1, 2, 6, rep(NA, 22))
Factorial_mem <- function(n){
if (n < 0){
message("Please enter a number greater than 0.")
}
else if (n == 0){
1
}
else if(!is.na(factorial_tbl[n])){
factorial_tbl[n]
}
else {
factorial_tbl[n] <<- n * Factorial_mem(n-1)
Factorial_mem(n)
}
}
Factorial_mem(0)
Factorial_mem(1)
Factorial_mem(2)
Factorial_mem(3)
library(microbenchmark)
Factorial_mem_performance <- microbenchmark(Factorial_mem(5))
Factorial_mem_performance
